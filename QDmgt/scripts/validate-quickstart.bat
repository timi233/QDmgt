@echo off\r\n\"\"\"\r\nQuickstart Validation Script for Channel Management System (Windows)\r\n\r\nThis script validates that the Channel Management System can be set up\r\nand run according to the quickstart guide on Windows.\r\n\"\"\"\r\n\r\nsetlocal enabledelayedexpansion\r\n\r\n:: Colors for output (using PowerShell for colored output)\r\nset \"RED=Write-Host\"\r\nset \"GREEN=Write-Host\"\r\nset \"YELLOW=Write-Host\"\r\nset \"NC=\"\r\n\r\n:: Logging functions\r\nset log_info=echo [INFO]\r\nset log_warn=echo [WARN]\r\nset log_error=echo [ERROR]\r\n\r\n:: Check if command exists\r\nwhere /q python >nul 2>&1\r\nif %errorlevel% neq 0 (\r\n    echo %log_error% Python 3.8+ is required but not found\r\n    exit /b 1\r\n)\r\necho %log_info% Found Python\r\n\r\nwhere /q node >nul 2>&1\r\nif %errorlevel% neq 0 (\r\n    echo %log_error% Node.js 16+ is required but not found\r\n    exit /b 1\r\n)\r\necho %log_info% Found Node.js\r\n\r\nwhere /q psql >nul 2>&1\r\nif %errorlevel% neq 0 (\r\n    echo %log_warn% PostgreSQL client not found - database validation will be skipped\r\n) else (\r\n    echo %log_info% Found PostgreSQL client\r\n)\r\n\r\nwhere /q docker >nul 2>&1\r\nif %errorlevel% neq 0 (\r\n    echo %log_warn% Docker not found - containerized deployment validation will be skipped\r\n) else (\r\n    echo %log_info% Found Docker\r\n)\r\n\r\necho %log_info% Prerequisites validation completed successfully\r\n\r\n:: Setup virtual environment\r\necho %log_info% Setting up Python virtual environment...\r\n\r\nif not exist \"venv\" (\r\n    python -m venv venv\r\n    echo %log_info% Virtual environment created\r\n) else (\r\n    echo %log_info% Virtual environment already exists\r\n)\r\n\r\ncall venv\\Scripts\\activate.bat\r\necho %log_info% Virtual environment activated\r\n\r\n:: Install backend dependencies\r\necho %log_info% Installing backend dependencies...\r\n\r\nif exist \"backend\\requirements.txt\" (\r\n    pip install -r backend\\requirements.txt\r\n    echo %log_info% Backend dependencies installed successfully\r\n) else (\r\n    echo %log_error% backend\\requirements.txt not found\r\n    exit /b 1\r\n)\r\n\r\n:: Install frontend dependencies\r\necho %log_info% Installing frontend dependencies...\r\n\r\nif exist \"frontend\\package.json\" (\r\n    cd frontend\r\n    npm install\r\n    cd ..\r\n    echo %log_info% Frontend dependencies installed successfully\r\n) else (\r\n    echo %log_error% frontend\\package.json not found\r\n    exit /b 1\r\n)\r\n\r\n:: Configure environment\r\necho %log_info% Configuring environment...\r\n\r\nif exist \".env.example\" (\r\n    copy .env.example .env\r\n    echo %log_info% Environment file created from example\r\n) else if not exist \".env\" (\r\n    :: Create minimal environment file\r\n    echo # Channel Management System Environment Configuration > .env\r\n    echo. >> .env\r\n    echo # Database >> .env\r\n    echo DATABASE_URL=postgresql://user:password@localhost:5432/channel_management >> .env\r\n    echo. >> .env\r\n    echo # JWT >> .env\r\n    echo JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production >> .env\r\n    echo JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30 >> .env\r\n    echo JWT_REFRESH_TOKEN_EXPIRE_DAYS=7 >> .env\r\n    echo. >> .env\r\n    echo # Security >> .env\r\n    echo SECURITY_ENVIRONMENT=development >> .env\r\n    echo SECURITY_DEBUG=true >> .env\r\n    echo. >> .env\r\n    echo # Logging >> .env\r\n    echo LOG_LEVEL=INFO >> .env\r\n    echo %log_info% Minimal environment file created\r\n) else (\r\n    echo %log_info% Environment file already exists\r\n)\r\n\r\n:: Run database migrations\r\necho %log_info% Running database migrations...\r\n\r\nif exist \"alembic.ini\" (\r\n    alembic upgrade head\r\n    echo %log_info% Database migrations completed successfully\r\n) else (\r\n    echo %log_warn% alembic.ini not found - database migration skipped\r\n)\r\n\r\necho %log_info% Quickstart validation completed!\r\n\r\necho.\r\necho ===============================================\r\necho Channel Management System Quickstart Validation\r\necho ===============================================\r\necho.\r\necho The Channel Management System has been successfully validated!\r\necho You can now:\r\necho   - Access the backend API at http://localhost:8000\r\necho   - Access the frontend UI at http://localhost:3000\r\necho   - View API documentation at http://localhost:8000/docs\r\necho.\r\n